package postgres

import (
	"context"

	"github.com/jackc/pgx/v4/pgxpool"
	"google.golang.org/genproto/protobuf/field_mask"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"{{ .ModuleName }}/internal/models"
	"{{ .ModuleName }}/internal/state"
)

type {{ LowerCase .ResourceName }}Store struct {
	*pgsqlStore
}

// New{{ .ResourceName }}Store returns a {{ LowerCase .ResourceName }}Store that is backed by pgsql
func New{{ .ResourceName }}Store(ctx context.Context, db *pgxpool.Pool, options ...StoreOption) state.{{ .ResourceName }}Store {
	s := newInternalStore(ctx, db, options...)

	var store state.{{ .ResourceName }}Store = &{{ LowerCase .ResourceName }}Store{s}
	if s.metrics {
		store = state.{{ .ResourceName }}StoreWithMetrics(store, s.logger)
	}

	if s.trace {
		store = state.{{ .ResourceName }}StoreWithTrace(store, s.logger)
	}

	return store
}

func (e *{{ LowerCase .ResourceName }}Store) Create{{ .ResourceName }}(ctx context.Context, r *models.{{ .ResourceName }}) (*models.{{ .ResourceName }}, error) {
	return nil, nil
}

func (e *{{ LowerCase .ResourceName }}Store) Get{{ .ResourceName }}(ctx context.Context, name string) (*models.{{ .ResourceName }}, error) {
	e.logger.Debugw("get {{ LowerCase .ResourceName }}", "name", name)
	return nil, status.Error(codes.Unimplemented, "get {{ LowerCase .ResourceName }} store unimplemented")
}

func (e *{{ LowerCase .ResourceName }}Store) List{{ Pluralize .ResourceName }}(ctx context.Context, args *models.ListArgs) ([]*models.{{ .ResourceName }}, string, error) {
	return nil, "", nil
}

func (e *{{ LowerCase .ResourceName }}Store) Update{{ .ResourceName }}(ctx context.Context, updateMask *field_mask.FieldMask, r *models.{{ .ResourceName }}) (*models.{{ .ResourceName }}, error) {
	return nil, nil
}

func (e *{{ LowerCase .ResourceName }}Store) Delete{{ .ResourceName }}(ctx context.Context, name string) error {
	return nil
}
