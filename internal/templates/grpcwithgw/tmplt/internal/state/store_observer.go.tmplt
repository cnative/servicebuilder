package state

import (
	"context"
	"reflect"
	"time"

	"github.com/cnative/pkg/log"

	"go.opencensus.io/stats"
	"go.opencensus.io/stats/view"
	"go.opencensus.io/tag"
)

var (
	// labels are the labels that are send to prometheus
	labels = []string{"method"}

	// KeyMethod is the label/tag used while reporting metrics
	KeyMethod, _ = tag.NewKey("method")

	storeCallLatency    = stats.Float64("store/latency", "The latency in milliseconds per call", "ms")
	storeCallCount      = stats.Int64("store/calls", "number of store calls made", "1")
	storeCallErrorCount = stats.Int64("store/call_errors", "number of store calls that returned error", "1")
)

var (
	// StoreCallLatencyView metric to represent the latency in milliseconds
	StoreCallLatencyView = &view.View{
		Name:        "store_call/latency",
		Measure:     storeCallLatency,
		Description: "The distribution of the latencies",

		// Latency in buckets:
		// [>=0ms, >=25ms, >=50ms, >=75ms, >=100ms, >=200ms, >=400ms, >=600ms, >=800ms, >=1s, >=2s, >=4s, >=6s]
		Aggregation: view.Distribution(0, 25, 50, 75, 100, 200, 400, 600, 800, 1000, 2000, 4000, 6000),
		TagKeys:     []tag.Key{KeyMethod}}

	// StoreCallCountView metric to represent the number of times store methods are called
	StoreCallCountView = &view.View{
		Name:        "store_call/count",
		Measure:     storeCallCount,
		Description: "The number calls to the store methods",
		Aggregation: view.Count(),
	}

	// StoreCallErrorCountView metric to represent the number of times store methods are called
	StoreCallErrorCountView = &view.View{
		Name:        "store_call_error/count",
		Measure:     storeCallErrorCount,
		Description: "The number store calls which returnd in error to the store methods",
		Aggregation: view.Count(),
	}
)

// DefaultStoreViews are the default store views provided by this package.
var DefaultStoreViews = []*view.View{
	StoreCallLatencyView,
	StoreCallCountView,
	StoreCallErrorCountView,
}

// newStoreObserver creates a storeObserver
func newStoreObserver(logger *log.Logger) *storeObserver {
	return &storeObserver{logger: logger}
}

// storeObserver encapsulates exposing of store specific metrics to Prometheus.
type storeObserver struct {
	logger *log.Logger
}

// defaultIgnoredMethods are methods which are commonly found on our stores and
// thus ignored when preloading.
var defaultIgnoredMethods = []string{"Close", "Healthy", "Ready", "C"}

// Preload counters and histograms for each method defined on s. You can
// optionally supply extra ignoreMethods which will be added to the
// defaultIgnoredMethods array.
func (s *storeObserver) Preload(ifc interface{}, extraIgnoredMethods ...string) {
	ignoredMethods := append(defaultIgnoredMethods, extraIgnoredMethods...)
	methods := getMethods(ifc)
	for _, method := range methods {
		if shouldIgnore(method, ignoredMethods) {
			continue
		}

	}
}

func shouldIgnore(method string, ignoredMethods []string) bool {
	for _, ignore := range ignoredMethods {
		if method == ignore {
			return true
		}
	}

	return false
}

// Observe immediately increments the counter for method and returns a func
// which will observe an metric item in duration based on the duration
func (s *storeObserver) Observe(ctx context.Context, method string) func() {
	ctx, err := tag.New(ctx, tag.Insert(KeyMethod, method))
	if err != nil {
		s.logger.Errorf("Failed to Observe method %s: %v", method, err)
	}

	stats.Record(ctx, storeCallCount.M(1)) // Counter to track a store call
	startTime := time.Now()

	return func() {
		ms := float64(time.Since(startTime).Nanoseconds()) / 1e6
		stats.Record(ctx, storeCallLatency.M(ms))
	}
}

// getMethods uses the reflect package to get the method names on defined on a interface
func getMethods(in interface{}) []string {
	if in == nil {
		return []string{}
	}

	t := reflect.TypeOf(in)
	if t.Kind() != reflect.Ptr {
		t = reflect.PtrTo(t)
	}

	numMethods := t.NumMethod()
	methods := make([]string, numMethods)
	for i := 0; i < numMethods; i++ {
		methods[i] = t.Method(i).Name
	}

	return methods
}
