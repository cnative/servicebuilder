export VERSION    ?= ${GIT_COMMIT}
export GIT_COMMIT ?= $(shell git describe --tags --always --dirty --match=v* 2> /dev/null || echo unknown)
export LD_FLAGS = -X "main.gitCommit=$(GIT_COMMIT)" -X "main.version=$(VERSION)"

export GOBIN = $(abspath .)/.tools/bin
export PATH := $(GOBIN):$(abspath .)/bin:$(PATH)
export CGO_ENABLED=0

export V = 0
export Q = $(if $(filter 1,$V),,@)
export M = $(shell printf "\033[34;1m▶\033[0m")

export CC = go build -ldflags '$(LD_FLAGS)'

.PHONY: help
help:
	@grep -E '^[ a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-25s\033[0m %s\n", $$1, $$2}'

.PHONY: deps
deps:
	$(info $(M) fetching deps …)
	$Q go get -d -v ./...
	$Q go mod tidy

.PHONY: install-deptools
install-deptools: deps ## install dependent go tools
	$(info $(M) installing necessary tools …)
	$Q sh ./scripts/install_tools_check.sh

.PHONY: gen
gen:
	$Q go generate ./pkg/api ./internal/state ; $(info $(M) generating grpc api server handler, gateway, swagger and metrics & trace store …)

.PHONY: fmt
fmt: ## run go fmt on all source files
	$(info $(M) formatting …)
	$Q goimports -w -local {{ .ModuleName }} ./cmd ./pkg ./internal

.PHONY: vet
vet: ## run go vet on all source files
	$(info $(M) vetting …)
	$Q go vet ./...

.PHONY: lint
lint: ## run golint
	$(info $(M) linting …)
	$Q ./.tools/bin/golangci-lint --verbose run ./... --timeout=5m --modules-download-mode=vendor

.PHONY: build
build: gen fmt vet  ## build service
	$(info $(M) building executable …)
	$Q $(CC) -o bin/{{ .Name }} ./cmd

.PHONY: test
test: ## run go tests with race detector
	$(info $(M) testing …)
	$Q go test $(GO_TEST_FLAGS) $(shell go list ./...)

.PHONY: build-image
build-image: ## build container image using docker
	$Q docker build --build-arg 'LD_FLAGS=$(LD_FLAGS)' -t {{ .ImageName }}:$(VERSION) . ; $(info $(M) building docker image …)

.PHONY: push-image
push-image: build-image ## build and publish container image using docker
	$Q docker push {{ .ImageName }}:$(VERSION) ; $(info $(M) pushing docker image `…)

.PHONY: clean
clean: ; $(info $(M) cleaning …)	@ ## cleanup everything
	@rm -rf bin
	@rm -rf test/tests.* test/coverage.*